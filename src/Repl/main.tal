@REPL ( char -> ) [
  ( Read )
  .Console/read DEI
  ( DUP SP NEQ ?{ POP BRK ( ignore ) } )
  DUP LIT "@ NEQ ?{ #01 ;&assemble STA }
  DUP LIT "[ NEQ ?{ #00 ,&multi-line STR POP BRK }
  DUP LIT "] NEQ ?{ #01 ,&multi-line STR POP BRK }
  DUP LIT "( NEQ ?{ #00 ,&comment STR POP BRK }
  DUP LIT ") NEQ ?{ #01 ,&comment STR POP BRK }
  DUP NL EQU ?{
    [ LIT &comment 01 ] ?{
      POP BRK }
    ;input-ptr LDA2 STA
    ;input-ptr LDA2 INC2 ;input-ptr STA2  BRK }
  [ LIT &multi-line 01 ] ?{
    POP BRK }
  POP ( consume last newline )
  ;heap-ptr LDA2 STH2
  ( assemble-bytecode ) <assemble>
  ;REPL/assemble LDA ?{
    ( assemble expr return jump )
    #a0 ;heap-ptr LDA2 STA
    ;REPL/expr-return ;heap-ptr LDA2 INC2 STA2
    #2c ;heap-ptr LDA2 INC2 INC2 INC2 STA
    ( reset expr-ptr )
    STH2kr ;heap-ptr STA2 }
  ;input ;input-ptr STA2 ( reset input-ptr )

  ( Eval )
  [ LIT &assemble $1 ] ?{
    STH2r JMP2 }
  POP2r
  &expr-return
  #00 ,&assemble STR
  ;input #0100 <mclr>

  ( Print )
  DBG
  .DEBUG ?{
    { \n "@heap \0 } ;heap <pobj>
    { \n "@mem/symbols \0 } ;mem/symbols <pobj> }

  ( Loop )
  <print-prompt> BRK
]

@banner [
   \s \s "█ "▄ \s \s NAME
   "▐ \s "█ \s "▌ \s DESCRIPTION
   \s "▀ "█ \s \s \s AUTHOR
   \s \s \s \s \s \s \0 ( "Type \s ""help" \s "for \s "help. \s )
]

@<pmem-usage> ( -- ) [
  ;end ;heap-ptr LDA2 SUB2 <pdec>
  ;&free <pstr>
  JMP2r
    &free [ \s "bytes \s "free. \n \0 ]
]

@<print-prompt> ( -- ) [
  ;&prompt-start <pstr>
  ;heap-ptr LDA2 <phex>
  ;&prompt-end <pstr>
  JMP2r
    &prompt-start \n "փ \s "[ \0
    &prompt-end   "]> \s \0
]

@assemble-bytecode ( -- val* ) [
  [ LIT2r 0000 ] ;input
  &>loop ( str* `acc* -: val* )
    LDAk parse-nibble INC #00 EQU ?{
      [ LITr 40 ] SFT2r LDAk parse-nibble [ LITr 00 ] STH
      ADD2r INC2
      [ LIT2 &count 0200 ] INC DUP2 ,&count STR2
      GTH ?{ #0200 ,&count STR2
        STHkr ;REPL/assemble LDA ?{
          ;expr-ptr LDA2 STA
          ;expr-ptr LDA2 INC2 ;expr-ptr STA2 !&continue }
        ;heap-ptr LDA2 STA
        ;heap-ptr LDA2 INC2 ;heap-ptr STA2 }
        &continue
    LDAk ?&>loop }
  POP2r POP2 JMP2r
]

@parse-nibble ( c -- val! ) [
  ( dec ) [ LIT "0 ] SUB DUP #09 GTH ?{ JMP2r }
  ( hex ) #27 SUB DUP #0f GTH ?{ JMP2r }
  ( Error ) POP #ff JMP2r
]
